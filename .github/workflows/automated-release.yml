name: Automated Release

on:
  push: {}
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs: {}

permissions:
  contents: write

jobs:
  check-version-and-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.create-tag }}
      tag-name: ${{ steps.check.outputs.tag-name }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Run tests (if present)
      run: npm test --if-present

    - name: Check if release needed
      id: check
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TAG_NAME="v$CURRENT_VERSION"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Expected tag: $TAG_NAME"
        
        # Fetch all tags
        git fetch --tags
        
        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, no action needed"
          echo "create-tag=false" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG_NAME does not exist, will create release"
          echo "create-tag=true" >> $GITHUB_OUTPUT
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

  build:
    needs: check-version-and-release
    if: needs.check-version-and-release.outputs.should-release == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Electron app
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          npm run build:linux
        elif [ "$RUNNER_OS" == "Windows" ]; then
          npm run build:win
        elif [ "$RUNNER_OS" == "macOS" ]; then
          npm run build:mac
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
    
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist/*.dmg
          dist/*.zip
          dist/*.blockmap
          dist/latest-mac.yml
    
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/*.exe
          dist/*.nsis.7z
          dist/*.blockmap
          dist/latest.yml
    
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.blockmap
          dist/latest-linux.yml

  release:
    needs: [check-version-and-release, build]
    if: needs.check-version-and-release.outputs.should-release == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Create and push tag
      run: |
        TAG_NAME="${{ needs.check-version-and-release.outputs.tag-name }}"
        VERSION="${{ needs.check-version-and-release.outputs.version }}"
        
        echo "Creating tag: $TAG_NAME for version $VERSION"
        
        # Create annotated tag with release notes
        TAG_MESSAGE="Release $TAG_NAME - Automatically created for version $VERSION"
        
        git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
        git push origin "$TAG_NAME"
        
        echo "Successfully created and pushed tag: $TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      
    - name: Display structure of downloaded files
      run: ls -la
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check-version-and-release.outputs.tag-name }}
        files: |
          macos-builds/*
          windows-builds/*
          linux-builds/*
        name: Release ${{ needs.check-version-and-release.outputs.tag-name }}
        body: |
          ## Internet Speed Monitor ${{ needs.check-version-and-release.outputs.tag-name }}
          
          ### ðŸš€ What's New
          
          Check out the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ### ðŸ“¥ Downloads
          
          Choose the appropriate download for your operating system:
          
          #### macOS
          - **Internet Speed Monitor-${{ needs.check-version-and-release.outputs.version }}.dmg** - Standard installer for macOS (Intel & Apple Silicon)
          - **Internet Speed Monitor-${{ needs.check-version-and-release.outputs.version }}-mac.zip** - Portable application archive
          
          #### Windows
          - **Internet Speed Monitor Setup ${{ needs.check-version-and-release.outputs.version }}.exe** - Windows installer (recommended)
          - **Internet Speed Monitor ${{ needs.check-version-and-release.outputs.version }}.exe** - Portable executable
          
          #### Linux
          - **Internet Speed Monitor-${{ needs.check-version-and-release.outputs.version }}.AppImage** - Universal Linux application (recommended)
          - **internet-speed-monitor_${{ needs.check-version-and-release.outputs.version }}_amd64.deb** - Debian/Ubuntu package
          
          ### ðŸ”§ Installation
          
          1. **macOS**: Download the .dmg file and drag the app to Applications
          2. **Windows**: Download and run the .exe installer
          3. **Linux**: Download the .AppImage, make it executable (`chmod +x`), and run
          
          ### ðŸ“‹ System Requirements
          
          - **macOS**: 10.14 (Mojave) or later
          - **Windows**: Windows 10 or later
          - **Linux**: Ubuntu 16.04+, Fedora 24+, Debian 9+ or equivalent
          
          ---
          
          *This release was automatically generated when version ${{ needs.check-version-and-release.outputs.version }} was detected in package.json*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}